/* FreeRTOS_tiva_demo
 *
 * main.c
 *
 * Kayla Kloster
 */

//#include <ledtasks.h>
#include <stdint.h>
#include "main.h"
#include "drivers/pinout.h"
#include "FPS.h"
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_ints.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/fpu.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/timer.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"

// TivaWare includes

// FreeRTOS includes
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "queue.h"
#include "task.h"


// Demo Task declarations
/*void LED_Task1(void *pvParameters);
void LED_Task2(void *pvParameters); */


#define ENROLL_TASK     (1UL << 0UL)
#define CHECKID_TASK    (1UL << 1UL)
#define DELETEID_TASK   (1UL << 2UL)
#define DELETALL_TASK   (1UL << 3UL)
static const int *led_on = 1;
// Main function
int main(void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA));
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);

    ROM_IntMasterEnable();

    Open();

    EventGroupHandle_t xUserInput_Event;
    xUserInEvent = xEventGroupCreate();

    // Create demo tasks
   /* xTaskCreate(LED_Task1, (const portCHAR *)"LED1",
                configMINIMAL_STACK_SIZE, NULL, 1, NULL);

    xTaskCreate(LED_Task2, (const portCHAR *)"LED2",
                configMINIMAL_STACK_SIZE, NULL, 1, NULL); */

    xTaskCreate(FP_Task, (const portCHAR *)"Fingerprint Sensor",
             configMINIMAL_STACK_SIZE, NULL, 1, NULL);


    vTaskStartScheduler();

    return 0;
}


void __error__(char *pcFilename, uint32_t ui32Line)
{
    // Place a breakpoint here to capture errors until logging routine is finished
    while (1)
    {
    }
}
