/* FreeRTOS_tiva_demo
 *
 * main.c
 *
 * Kayla Kloster
 */

#include <ledtasks.h>
#include <stdint.h>
#include "main.h"
#include "drivers/pinout.h"
#include "FPS.h"

// TivaWare includes

// FreeRTOS includes
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "queue.h"
#include "task.h"
#include "gpio.h"
#include "uart.h"
#include "sysctl.h"
#include "inc/hw_memmap.h"
#include "pin_map.h"


// Demo Task declarations
/*void LED_Task1(void *pvParameters);
void LED_Task2(void *pvParameters); */


#define ENROLL_TASK     (1UL << 0UL)
#define CHECKID_TASK    (1UL << 1UL)
#define DELETEID_TASK   (1UL << 2UL)
#define DELETALL_TASK   (1UL << 3UL)
static const int *led_on = 1;
// Main function
int main(void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA));
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);

    EventGroupHandle_t xFP_EVENT;
    xFP_EVENT = xEventGroupCreat();
    // Create demo tasks
   /* xTaskCreate(LED_Task1, (const portCHAR *)"LED1",
                configMINIMAL_STACK_SIZE, NULL, 1, NULL);

    xTaskCreate(LED_Task2, (const portCHAR *)"LED2",
                configMINIMAL_STACK_SIZE, NULL, 1, NULL); */

    xTaskCreate(FPTask_Open, (const portCHAR *)"OPEN",
             configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    xTaskCreate(FPTask_SetLED, (const portCHAR *)"Turn on LED",
                configMINIMAL_STACK_SIZE, &led_on, 1, NULL);


    vTaskStartScheduler();

    return 0;
}


void __error__(char *pcFilename, uint32_t ui32Line)
{
    // Place a breakpoint here to capture errors until logging routine is finished
    while (1)
    {
    }
}
